Q1. What is the purpose of Python's OOP?
The purpose of Python's Object-Oriented Programming (OOP) is to help programmers organize and structure their code by creating classes and objects that encapsulate data and behavior. OOP allows for the creation of reusable and modular code that is easier to maintain, extend, and debug.

Q2. Where does an inheritance search look for an attribute?
Inheritance search in Python looks for an attribute in the following order: first in the instance, then in the class, then in any superclasses.


Q3. How do you distinguish between a class object and an instance object?
A class object is a blueprint or template for creating instance objects, whereas an instance object is a specific object that is created from a class and has its own unique data and behavior.


Q4. What makes the first argument in a classâ€™s method function special?
In a class's method function, the first argument self refers to the instance object that the method is being called on. It allows the method to access and modify the instance's data and behavior.


Q5. What is the purpose of the __init__ method?
The __init__ method is a special method in Python classes that is called when an instance of the class is created. It is used to initialize the instance's data and behavior by setting default values for instance variables and performing any necessary setup.


Q6. What is the process for creating a class instance?
To create a class instance, we first need to create an object of the class by calling the class's constructor method, which is usually the __init__ method.
class MyClass:
    def __init__(self, arg1, arg2):
        self.arg1 = arg1
        self.arg2 = arg2

my_object = MyClass("value1", "value2")


Q7. What is the process for creating a class?
To create a class, we define a class using the class keyword, followed by the class name and a colon. Inside the class definition, we can define methods and variables that are specific to the class.
class MyClass:
    def my_method(self):
        print("Hello, world!")


Q8. How would you define the superclasses of a class?
The superclasses of a class are the classes that the current class inherits from. In Python, we can define a class that inherits from one or more superclasses by including them in the class definition using parentheses.
