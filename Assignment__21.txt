1. What is the estimated depth of a Decision Tree trained (unrestricted) on a one million instance training set?
The estimated depth of a Decision Tree trained on a one million instance training set would likely be very deep, possibly reaching hundreds or even thousands of levels. This is because the tree would have the ability to create a complex set of rules that fit the training data perfectly, but it would be at risk of overfitting and performing poorly on new data.

2. Is the Gini impurity of a node usually lower or higher than that of its parent? Is it always lower/greater, or is it usually lower/greater?
The Gini impurity of a node is usually lower than that of its parent. This is because the decision tree algorithm is designed to split the data in a way that maximizes the information gain, which is the difference between the impurity of the parent node and the weighted sum of the impurities of the child nodes. Therefore, each split is intended to reduce the impurity of the resulting nodes.

3. Explain if it's a good idea to reduce max depth if a Decision Tree is overfitting the training set?
If a Decision Tree is overfitting the training set, it's a good idea to reduce the max depth of the tree. This will help to reduce the complexity of the model and prevent it from fitting the noise in the training data. By reducing the max depth, the tree will be forced to make simpler and more generalizable splits, which should improve its performance on new data.

4. Explain if it's a good idea to try scaling the input features if a Decision Tree underfits the training set?
If a Decision Tree is underfitting the training set, it's not necessary to try scaling the input features. Decision Trees are not sensitive to the scale of the input features, and scaling is only required for some other machine learning algorithms, such as gradient descent-based algorithms. Instead, underfitting is typically caused by the model being too simple, so it may be necessary to increase the complexity of the tree by increasing the max depth or using an ensemble of trees.

5. How much time will it take to train another Decision Tree on a training set of 10 million instances if it takes an hour to train a Decision Tree on a training set with 1 million instances?
Assuming the time to train a Decision Tree scales linearly with the size of the training set, it would take approximately 10 hours to train another Decision Tree on a training set of 10 million instances, given that it takes one hour to train a Decision Tree on a training set with 1 million instances.

6. Will setting presort=True speed up training if your training set has 100,000 instances?
Setting presort=True may or may not speed up training, depending on the size and complexity of the decision tree being trained. Presorting is a technique used to speed up the process of finding the best split point for each node, by pre-sorting the data according to each feature. However, this can be computationally expensive and may not be necessary for smaller datasets or simpler trees. For a training set with 100,000 instances, it's possible that presorting could speed up training, but it would depend on the specifics of the model and the computing environment.

7. Follow these steps to train and fine-tune a Decision Tree for the moons dataset:

a. To build a moons dataset, use make moons(n samples=10000, noise=0.4).

b. Divide the dataset into a training and a test collection with train test split().

c. To find good hyperparameters values for a DecisionTreeClassifier, use grid search with cross-validation (with the GridSearchCV class). Try different values for max leaf nodes.

d. Use these hyperparameters to train the model on the entire training set, and then assess its output on the test set. You can achieve an accuracy of 85 to 87 percent.

from sklearn.datasets import make_moons
from sklearn.model_selection import train_test_split, GridSearchCV
from sklearn.tree import DecisionTreeClassifier

# a. Build moons dataset
X, y = make_moons(n_samples=10000, noise=0.4)

# b. Split dataset into training and test sets
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.2, random_state=42)

# c. Find good hyperparameters with grid search and cross-validation
param_grid = {'max_leaf_nodes': [2, 4, 8, 16, 32, 64, 128]}
tree_clf = DecisionTreeClassifier(random_state=42)
grid_search = GridSearchCV(tree_clf, param_grid, cv=5, scoring='accuracy', return_train_score=True)
grid_search.fit(X_train, y_train)

# d. Use the best hyperparameters to train the model and assess its performance on the test set
best_tree_clf = grid_search.best_estimator_
best_tree_clf.fit(X_train, y_train)
test_accuracy = best_tree_clf.score(X_test, y_test)
print('Test accuracy:', test_accuracy)


8. Follow these steps to grow a forest:

         a. Using the same method as before, create 1,000 subsets of the training set, each containing 100 instances chosen at random. You can do this with Scikit-ShuffleSplit Learn's class.

          b. Using the best hyperparameter values found in the previous exercise, train one Decision Tree on each subset. On the test collection, evaluate these 1,000 Decision Trees. These Decision        Trees would likely perform worse than the first Decision Tree, achieving only around 80% accuracy, since they were trained on smaller sets.

         c. Now the magic begins. Create 1,000 Decision Tree predictions for each test set case, and keep only the most common prediction (you can do this with SciPy's mode() function). Over the test collection, this method gives you majority-vote predictions.

         d. On the test range, evaluate these predictions: you should achieve a slightly higher accuracy than the first model (approx 0.5 to 1.5 percent higher). You've successfully learned a Random Forest classifier!

a. 
from sklearn.model_selection import ShuffleSplit

n_subsets = 1000
subset_size = 100
shuffle_split = ShuffleSplit(n_splits=n_subsets, train_size=subset_size, random_state=42)

for subset_train_index, _ in shuffle_split.split(X_train):
    X_subset_train = X_train[subset_train_index]
    y_subset_train = y_train[subset_train_index]
    
    # train decision tree on the subset here
b. 
from sklearn.tree import DecisionTreeClassifier
from sklearn.metrics import accuracy_score

tree_params = {'max_leaf_nodes': [2, 3, 4, 5, 6, 7, 8, 9, 10]}
grid_search = GridSearchCV(DecisionTreeClassifier(random_state=42), tree_params, cv=5, verbose=1)
grid_search.fit(X_train, y_train)

best_tree = grid_search.best_estimator_

forest = [DecisionTreeClassifier(max_leaf_nodes=best_tree.max_leaf_nodes, random_state=42) for _ in range(n_subsets)]

for tree, subset_train_index in zip(forest, shuffle_split.split(X_train)):
    tree.fit(X_train[subset_train_index], y_train[subset_train_index])

y_pred = [tree.predict(X_test) for tree in forest]
y_pred_majority_votes, _ = mode(y_pred, axis=0)
accuracy = accuracy_score(y_test, y_pred_majority_votes)

c.
n_trees = 1000
n_instances = X_test.shape[0]

y_pred = np.empty((n_trees, n_instances), dtype=np.uint8)

for tree_index, tree in enumerate(forest):
    y_pred[tree_index] = tree.predict(X_test)

y_pred_majority_votes, _ = mode(y_pred, axis=0)
d.
accuracy = accuracy_score(y_test, y_pred_majority_votes)
